getwd()
install.packages('shiny')
source("~/.active-rstudio-document")
unzip('archive.zip')
read_csv(heart.csv)
orig_data <- read_csv('heart.csv')
glimpse(orig_data)
orig_data %>% table(Sex)
orig_data %>% table(.$Sex)
table(orig_data$Sex)
table(orig_data$ChestPainType)
table(orig_data[,2])
table(orig_data[,2:3])
head(orig_data)
orig_data %>% select(Sex:RestingBP)
range(orig_data$FastingBS)
range(orig_data$Oldpeak)
orig_data %>% select(Sex, ChestPainType, FastingBS, RestingECG, ExerciseAngina)
orig_data %>% select(Sex, ChestPainType, FastingBS, RestingECG, ExerciseAngina) %>% apply(1, table)
orig_data %>% select(Sex, ChestPainType, FastingBS, RestingECG, ExerciseAngina) %>% apply(2, table)
orig_data %>% select(Sex, ChestPainType, FastingBS, RestingECG, ExerciseAngina) %>% apply(2, table)
orig_data %>% select(Sex, ChestPainType, FastingBS, RestingECG, ExerciseAngina, HeartDisease) %>% apply(2, table)
range(orig_data$Oldpeak)
range(orig_data$ST_Slope)
orig_data$ST_Slope
orig_data %>% select(Sex, ChestPainType, FastingBS, RestingECG, ExerciseAngina, ST_Slope, HeartDisease) %>% apply(2, table)
# orig_data %>% select(Sex, ChestPainType, FastingBS, RestingECG,
# ExerciseAngina, ST_Slope, HeartDisease) %>% apply(2, table)
par(mfrow(c(4,3)))
?par
# orig_data %>% select(Sex, ChestPainType, FastingBS, RestingECG,
# ExerciseAngina, ST_Slope, HeartDisease) %>% apply(2, table)
par(mfrow = (c(4,3)))
plot(orig_data$Sex)
# STEP TWO: PRELIMINARY EDA, DATA IMPUTATION
# ------------------------------------------
glimpse(orig_data)
# Let's take a look at non-factor variables
orig_data %>% select(across(is.double))
# Let's take a look at non-factor variables
orig_data %>% select(where(is.double))
?apply
orig_data %>% select(where(is.double)) %>% apply(2, plot)
orig_data %>% select(where(is.double)) %>% apply(2, sum)
orig_data %>% select(where(is.double)) %>% apply(2, hist)
# Let's take a look at factor variables
orig_data %>% select(where(!is.double)) %>% table
# Let's take a look at factor variables
orig_data %>% select(where(is.character)) %>% table
# Let's take a look at factor variables
orig_data %>% summarise(where(is.character))
# Let's take a look at factor variables
orig_data %>% select(where(is.character)) %>% summarise
# Let's take a look at factor variables
orig_data %>% summarise((where(is.character)))
# Let's take a look at factor variables
orig_data %>% summarise(across(where(is.character)))
# Let's take a look at factor variables
orig_data %>% summarise(across(where(is.character), n_distinct()))
# Let's take a look at factor variables
orig_data %>% summarise(across(where(is.character), n_distinct))
# Let's take a look at factor variables
orig_data %>% select(where(is.character))
# Let's take a look at factor variables
orig_data %>% select(where(is.character)) %>% apply(2, table)
# Let's take a look at factor variables
orig_data %>% select(where(is.character)) %>% apply(2, table)
# Let's take a look at non-factor variables
par(mfrow = (c(4, 2)))
orig_data %>% select(where(is.double)) %>% apply(2, hist)
# Let's take a look at non-factor variables
par(mfrow = (c(2,4)))
orig_data %>% select(where(is.double)) %>% apply(2, hist)
?hist
?rainbow
?imap
orig_data %>% select(where(is.double)) %>% apply(2, hist)
?map
orig_data %>% select(where(is.double)) %>% apply(2, function(i) {hist(i)})
orig_data %>% select(where(is.double)) %>% apply(2, hist)
orig_data %>% select(where(is.double)) %>% apply(2, hist)
orig_data %>% select(where(is.double)) %>% apply(2, hist)
orig_data %>% select(where(is.double)) %>% apply(2, hist)
orig_data
orig_data %>% select(where(is.double))
orig_data %>% select(where(is.double)) %>% map(function(i) {hist(i)})
orig_data %>% select(where(is.double)) %>% map(function(i) {mean(i)})
orig_data %>% select(where(is.double)) %>% map(function(i) {hist(i)})
library(ggplot2)
?pivot_longer
orig_data %>% select(where(is.double)) %>% pivot_longer()
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything())
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything(), names_to = 'variable', values_to = 'value')
# Let's take a look at non-factor variables
par(mfrow=c(1,1))
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything())
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name))
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) + facet_wrap(~ name)
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) + facet_wrap(~ name) + geom_histogram()
?scale_fill_viridis_d
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) + facet_wrap(~ name) + geom_histogram(bins=30)
?facet_wrap
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) + facet_wrap(name~) + geom_histogram()
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) + facet_wrap(~ name, scales = 'free_x') + geom_histogram()
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) + facet_wrap(~ name, scales = 'free_x')
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) +
facet_wrap(~ name, scales = 'free_x') + geom_histogram(binwidth = 30)
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) +
facet_wrap(~ name, scales = 'free_x') + geom_histogram()
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) +
facet_wrap(~ name, scales = 'free_x') + geom_histogram(bins=30)
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) +
facet_wrap(~ name, scales = 'free') + geom_histogram(bins=30)
sum(orig_data$RestingBP==0)
?step_corr
?recipe
?step_corr
orig_data %>% glimpse()
?cor
orig_data %>% select(where(is.double)) %>% cor
orig_data %>% select(where(is.double)) %>% ggcorr
orig_data %>% select(where(is.double)) %>% ggcor
orig_data %>% select(where(is.double)) %>% ggcorr
library(tidymodels)
library(tidyverse)
library(workflows)
library(tune)
library(ggplot2)
orig_data %>% select(where(is.double)) %>% ggcorr
# Let's take a look at non-factor variables
# Making a loop to graph numeric variables was a huge pain.
# //Go through the steps in the RShiny//
orig_data %>% select(where(is.double)) %>% pivot_longer(cols=everything()) %>%
ggplot(aes(x=value, fill=name)) +
facet_wrap(~ name, scales = 'free') + geom_histogram(bins=30)
# First, we should convert the outcome to factor to ensure our model (ranger)
# runs a classification model, not regression.
finalData <- orig_data %>% mutate(HeartDisease=as.factor(HeartDisease))
finalData %>% glimpse
levels(finalData$HeartDisease)
# There is a huge spike in the Cholesterol graph for x = 0. These values
# represent missing/unknown values.
final_Data <- final_Data %>%
mutate(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
})
# There is a huge spike in the Cholesterol graph for x = 0. These values
# represent missing/unknown values.
finalData <- finalData %>%
mutate(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
})
?mutate
finalData %>%
mutate(Cholesterol = function(i) {
if_else(i==0, as.numeric(NA), i)
}
)
finalData %>%
mutate(across(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
}))
finalData %>%
mutate(across(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
}))
finalData %>%
mutate(across(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
})) %>% select(Cholesterol) %>% table
finalData %>%
mutate(across(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
})) %>% select(Cholesterol) %>% sum(is.na)
finalData %>%
mutate(across(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
})) %>% select(Cholesterol) %>% sum(is.na(.))
finalData %>%
mutate(across(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
})) %>% select(Cholesterol)
finalData %>%
mutate(across(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
})) %>% select(Cholesterol) %>% range
# There is a huge spike in the Cholesterol graph for x = 0. These values
# represent missing/unknown values.
finalData <- finalData %>%
mutate(across(Cholesterol, function(i) {
if_else(i==0, as.numeric(NA), i)
}))
table(finalData$Cholesterol)
finalData$Cholesterol
cor(finalData)
mean(finalData$MaxHR[is.na(finalData$Cholesterol)])
mean(finalData$MaxHR)
finalData[,c(MaxHR, Cholesterol)]
finalData[,c(8, 53)]
finalData[,c(8, 5)]
table(finalData$HeartDisease)
# First, we should convert the outcome to factor to ensure our model (ranger)
# runs a classification model, not regression.
finalData <- orig_data %>% mutate(HeartDisease=as.factor(HeartDisease)) %>%
mutate(across(where(is.character), as.factor))
range(finalData$FastingBS)
range(finalData$Oldpeak)
# First, we should convert the outcome to factor to ensure our model (ranger)
# runs a classification model, not regression.
finalData <- orig_data %>% mutate(HeartDisease=as.factor(HeartDisease),
FastingBS=as.factor(FastingBS)) %>%
mutate(across(where(is.character), as.factor))
dataSplit <- initial_split(finalData, prop = 3/4)
dataSplit6\
dataSplit
dataTraining <- training(dataSplit)
dataTestign <- testing(dataSplit)
dataTesting <- testing(dataSplit)
rm(dataTestign)
dataCV <- vfold_cv(dataTraining)
finalData %>% glimpse
dataRecipe <- recipe(HeartDisease ~ ., data=finalData) %>%
step_normalize(all.numeric()) %>% step_impute_knn(Cholestero)
dataRecipe <- recipe(HeartDisease ~ ., data=finalData) %>%
step_normalize(all.numeric()) %>% step_impute_knn(Cholesterol)
dataRecipe
library(ranger)
rfModel <- rand_forest() %>% set_args(mtry=tune()) %>% set_engine('ranger',
importance = 'impurity') %>% set_mode('classification')
rfModel
rfModel <- rand_forest() %>% set_args(mtry=tune(), min_n=tune()) %>%
set_engine('ranger', importance = 'permutation') %>%
set_mode('classification')
rfModel
rfWorkflow <- workflow() %>% add_recipe(dataRecipe) %>% add_model(rfModel)
rfWorkflow
?step_impute_knn
dataSplit
dataCV
rfWorkflow
# STEP FOUR: TESTING DIFFERENT PARAMETERS
# ---------------------------------------
# Good mtry is sqrt(total vars) = sqrt(11) = 3
rfGrid <- expand.grid(mtry=c(2,3,4,5))
rfGrid
# STEP FOUR: TESTING DIFFERENT PARAMETERS
# ---------------------------------------
# Good mtry is sqrt(total vars) = sqrt(11) = 3
rfGrid <- expand.grid(mtry=c(2:5))
rfGrid
?min_n
# STEP FOUR: TESTING DIFFERENT PARAMETERS
# ---------------------------------------
# Good mtry is sqrt(total vars) = sqrt(11) = 3
rfGrid <- expand.grid(mtry=2:6, min_n=c(1, 3, 5, 10, 15, 20, 30))
rfGrid
rfTuneResults <- rfWorkflow %>% tune_grid(resamples=dataCV, grid=rfGrid,
metrics=metric_set(accuracy, roc_auc))
dataRecipe <- recipe(HeartDisease ~ ., data=finalData) %>%
step_normalize(all_numeric()) %>% step_impute_knn(Cholesterol)
rfModel <- rand_forest() %>% set_args(mtry=tune(), min_n=tune()) %>%
set_engine('ranger', importance = 'permutation') %>%
set_mode('classification')
rfWorkflow <- workflow() %>% add_recipe(dataRecipe) %>% add_model(rfModel)
# STEP FOUR: TESTING DIFFERENT PARAMETERS
# ---------------------------------------
# Good mtry is sqrt(total vars) = sqrt(11) = 3
rfGrid <- expand.grid(mtry=2:6, min_n=c(1, 3, 5, 10, 15, 20, 30))
rfTuneResults <- rfWorkflow %>% tune_grid(resamples=dataCV, grid=rfGrid,
metrics=metric_set(accuracy, roc_auc))
)
rfTuneResults %>% pull()
rfTuneResults %>% collect_metrics()
rfTuneResults %>% select_best(metric='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(mtry==2)
rfTuneResults %>% collect_metrics() %>% filter(mtry==2, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(min_n==1, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(min_n==2, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(min_n==3, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(min_n==4, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(min_n==5, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(min_n==10, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(min_n==15, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(min_n==20, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(min_n==30, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(mtry==2, .metric=='accuracy')
rfTuneResults %>% collect_metrics() %>% filter(mtry==3, .metric=='accuracy')
seq(1, 10, 20)
seq(1, 10)
?Seq
?Seq
?seq
seq(1, 10, .5)
# Comparing mtry's for each min_n, it seems like there is a weak negative
# correlation between mtry and model accuracy.
# However, min_n seems a lot more interesting. Let's keep experimenting.
rfGrid2 <- expand.grid(mtry=1:2, min_n=c(1, 3, 5, seq(5, 50, 5)))
rfGrid2
rfTuneResults2 <- rfWorkflow %>% tune_grid(resamples=dataCV, grid=rfGrid2,
metrics=metric_set(accuracy, roc_auc), control=control_grid(verbose=T))
rfTuneResults2 %>% collect_metrics()
rfTuneResults2 %>% select_best('accuracy')
rfTuneResults2 %>% select_best(method='accuracy')
rfTuneResults2 %>% select_best(metric='accuracy')
rfTuneResults2 %>% select_best(metric='roc_auc')
rfTuneResults2 %>% collect_metrics()
rfTuneResults2 %>% select_best(metric='accuracy')
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(desc(mean))
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(desc)
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(desc())
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(desc(mtry))
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(desc(min_n))
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(desc(mean))
rfTuneResults %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(desc(mean))
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='roc_auc') %>% arrange(desc(mean))
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(asc(std_error))
?desc
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(std_error)
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>% arrange(std_err)
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='roc_ayuc') %>% arrange(std_err)
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='roc_auc') %>% arrange(std_err)
# mtry=2, min_n=3 comes in at first place for accuracy, first (tied) for
# roc_auc, first for lowest std err (accuracy) and fifth for lowest (roc_auc)
rfTuneResults2 %>% select_best(metric='accuracy')
# mtry=2, min_n=3 comes in at first place for accuracy, first (tied) for
# roc_auc, first for lowest std err (accuracy) and fifth for lowest (roc_auc)
paramFinal <- rfTuneResults2 %>% select_best(metric='accuracy')
paramFinal
rfTuneResults2[mtry==2, min_n==3]
rfTuneResults2 %>% filter(mtry==2, min_n==3)
rfTuneResults2
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='accuracy') %>%
arrange(desc(mean))
rfTuneResults2 %>% collect_metrics() %>% filter(.metric=='roc_auc') %>%
arrange(desc(mean))
rfWorkflow <- rfWorkflow %>% finalize_workflow(paramFinal)
rfWorkflow
# STEP FIVE: FIT THE MODEL
# ------------------------
rfFit <- rfWorkflow %>% last_fit(dataSplit)
rfFit
rfFit %>% collect_metrics()
rfWorkflow
rfFit %>% pull(.prediction)
rfFit %>% pull(.metrics)
rfFit %>% collect_predictions() %>% conf_mat(truth=HeartDisease, estimate=)
rfFit %>% collect_predictions()
rfFit %>% collect_predictions() %>% conf_mat(truth=HeartDisease, estimate=.pred_class)
# Accuracy of 87.4%, not bad!
rfFit %>% collect_predictions() %>% conf_mat(truth=HeartDisease,
estimate=.pred_class)
paramFinal
rfWorkflow
paramFinal <- rfTuneResults2 %>% select_best(metric='accuracy')
rfWorkflow <- rfWorkflow %>% finalize_workflow(paramFinal)
# STEP FIVE: FIT THE MODEL
# ------------------------
rfFit <- rfWorkflow %>% last_fit(dataSplit)
testPerformance <- rfFit %>% collect_metrics()
testPerformance
testPerformance
# STEP THREE: CREATING THE MODEL FRAMEWORK
# ----------------------------------------
set.seed(12345)
paramFinal <- rfTuneResults2 %>% select_best(metric='accuracy')
rfWorkflow <- rfWorkflow %>% finalize_workflow(paramFinal)
# STEP FIVE: FIT THE MODEL
# ------------------------
rfFit <- rfWorkflow %>% last_fit(dataSplit)
testPerformance <- rfFit %>% collect_metrics()
testPerformance
paramFinal <- rfTuneResults2 %>% select_best(metric='accuracy')
rfWorkflow <- rfWorkflow %>% finalize_workflow(paramFinal)
# STEP FIVE: FIT THE MODEL
# ------------------------
rfFit <- rfWorkflow %>% last_fit(dataSplit)
testPerformance <- rfFit %>% collect_metrics()
testPerformance
paramFinal <- rfTuneResults2 %>% select_best(metric='accuracy')
rfWorkflow <- rfWorkflow %>% finalize_workflow(paramFinal)
# STEP FIVE: FIT THE MODEL
# ------------------------
rfFit <- rfWorkflow %>% last_fit(dataSplit)
testPerformance <- rfFit %>% collect_metrics()
testPerformance
all.equal(preds_run1$.pred_1, preds_run2$.pred_1)
# Accuracy of 87.8%, not bad!
rfFit %>% collect_predictions() %>% conf_mat(truth=HeartDisease,
estimate=.pred_class)
rfFit %>% collect_predictions() %>% ggplot() +
geom_density(aes(x=.pred_pos, fill=diabetes, alpha=0.5))
rfFit %>% collect_predictions()
rfFit %>% collect_predictions() %>% ggplot() +
geom_density(aes(x=.pred_0, fill=diabetes, alpha=0.5))
rfFit %>% collect_predictions() %>% ggplot() +
geom_density(aes(x=.pred_0, fill=HeartDisease, alpha=0.5))
fit(rfWorkflow, dataFinal)
fit(rfWorkflow, finalData)
# STEP SIX: FIT ON A TARGET DATASET
# ---------------------------------
finalModel <- fit(rfWorkflow, finalData)
extract_fit_parsnip(finalModel)
extract_fit_parsnip(finalModel)$fit$variable.importance
which.max(extract_fit_parsnip(finalModel)$fit$variable.importance)
extract_fit_parsnip(finalModel) / sum(extract_fit_parsnip(finalModel))
extract_fit_parsnip(finalModel)$fit$variable.importance / sum(extract_fit_parsnip(finalModel)$fit$variable.importance)
rfWorkflow %>% pull_workflow_spec()
extract_fit_parsnip(finalModel)$fit$importance_metric
extract_fit_parsnip(finalModel)$fit
?extract_fit_parsnip
temp <- extract_fit_parsnip(finalModel)$fit
temp$importance.mode
temp$predictions
temp$num.independent.variables
temp$prediction.error
summary(temp)
temp$forest
rm(temp)
